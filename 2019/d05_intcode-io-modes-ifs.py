p = [3,225,1,225,6,6,1100,1,238,225,104,0,1101,90,64,225,1101,15,56,225,1,14,153,224,101,-147,224,224,4,224,1002,223,8,223,1001,224,3,224,1,224,223,223,2,162,188,224,101,-2014,224,224,4,224,1002,223,8,223,101,6,224,224,1,223,224,223,1001,18,81,224,1001,224,-137,224,4,224,1002,223,8,223,1001,224,3,224,1,223,224,223,1102,16,16,224,101,-256,224,224,4,224,1002,223,8,223,1001,224,6,224,1,223,224,223,101,48,217,224,1001,224,-125,224,4,224,1002,223,8,223,1001,224,3,224,1,224,223,223,1002,158,22,224,1001,224,-1540,224,4,224,1002,223,8,223,101,2,224,224,1,223,224,223,1101,83,31,225,1101,56,70,225,1101,13,38,225,102,36,192,224,1001,224,-3312,224,4,224,1002,223,8,223,1001,224,4,224,1,224,223,223,1102,75,53,225,1101,14,92,225,1101,7,66,224,101,-73,224,224,4,224,102,8,223,223,101,3,224,224,1,224,223,223,1101,77,60,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,7,226,677,224,1002,223,2,223,1005,224,329,1001,223,1,223,1007,226,677,224,1002,223,2,223,1005,224,344,101,1,223,223,108,226,226,224,1002,223,2,223,1006,224,359,101,1,223,223,7,226,226,224,102,2,223,223,1005,224,374,101,1,223,223,8,677,677,224,1002,223,2,223,1005,224,389,1001,223,1,223,107,677,677,224,102,2,223,223,1006,224,404,101,1,223,223,1107,677,226,224,102,2,223,223,1006,224,419,1001,223,1,223,1008,226,226,224,1002,223,2,223,1005,224,434,1001,223,1,223,7,677,226,224,102,2,223,223,1006,224,449,1001,223,1,223,1107,226,226,224,1002,223,2,223,1005,224,464,101,1,223,223,1108,226,677,224,102,2,223,223,1005,224,479,101,1,223,223,1007,677,677,224,102,2,223,223,1006,224,494,1001,223,1,223,1107,226,677,224,1002,223,2,223,1005,224,509,101,1,223,223,1007,226,226,224,1002,223,2,223,1006,224,524,101,1,223,223,107,226,226,224,1002,223,2,223,1005,224,539,1001,223,1,223,1108,677,677,224,1002,223,2,223,1005,224,554,101,1,223,223,1008,677,226,224,102,2,223,223,1006,224,569,1001,223,1,223,8,226,677,224,102,2,223,223,1005,224,584,1001,223,1,223,1008,677,677,224,1002,223,2,223,1006,224,599,1001,223,1,223,108,677,677,224,102,2,223,223,1006,224,614,1001,223,1,223,108,226,677,224,102,2,223,223,1005,224,629,101,1,223,223,8,677,226,224,102,2,223,223,1005,224,644,101,1,223,223,107,677,226,224,1002,223,2,223,1005,224,659,101,1,223,223,1108,677,226,224,102,2,223,223,1005,224,674,1001,223,1,223,4,223,99,226]

def run(p, input):
    p = list(p)
    ip = 0
    inputIndex = 0
    def param(i, modes):
        mode = modes//int(10**(i-1))%10
        #print("mode", mode)
        if mode == 0:
            return p[p[ip+i]]
        else:
            return p[ip+i]
    while ip < len(p):
        modes = p[ip]//100
        opcode = p[ip]%100

        def formatArg(mode, i, val):
            res = str(p[ip+i])
            if mode == 0:
                res = "*"+res + "(" + str(param(i, modes))+")"
            return res
            
        def log(name, n):
            return
            parts = [str(ip), name]
            for i in range(n):
                mode = modes//int(10**i)%10
                parts.append(formatArg(mode, i+1, param(i+1, modes)))
            print(" ".join(parts))

        if opcode == 99: 
            break
        if opcode == 1:
            log("add", 3)
            p[p[ip+3]] = param(1, modes) + param(2, modes)
            ip+=4
        elif opcode == 2:
            log("mul", 3)
            p[p[ip+3]] = param(1, modes) * param(2, modes)
            ip+=4
        elif opcode == 3:
            log("inp", 1)
            p[p[ip+1]] = input[inputIndex]
            inputIndex+=1
            ip+=2
        elif opcode == 4:
            log("out", 1)
            v = param(1, modes)
            print("OUTPUT: ", v)
            if v != 0:
                return
            ip+=2
        elif opcode == 5: #jump-if-true
            log("ifT", 2)
            if param(1, modes) != 0:
                ip = param(2, modes)
            else:
                ip+=3
        elif opcode == 6: #jump-if-false
            log("ifF", 2)
            if param(1, modes) == 0:
                ip = param(2, modes)
            else:
                ip+=3
        elif opcode == 7: #less-than
            log("lt ", 3)
            p[p[ip+3]] = 1 if param(1, modes) < param(2, modes) else 0
            ip+=4
        elif opcode == 8: #equals
            log("eq ", 3)
            p[p[ip+3]] = 1 if param(1, modes) == param(2, modes) else 0
            ip+=4
        else:
            print("Unknown opcode: ", opcode)
            return
    #print(p)
    return p[0]

#run([1,0,0,0,99])
#run([2,3,0,3,99])
#run([2,4,4,5,99,0])
#run([1,1,1,4,99,5,6,0,99])
print("Part One:")
run(p, [1])

def debug():
    run([3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9], [1])
    run([3,3,1105,-1,9,1101,0,0,12,4,12,99,1], [1])
    run(
        [3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99], 
        [1])
    run(
        [3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99], 
        [8])
    run(
        [3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99], 
        [11])

print("Part Two:")
run(p, [5])
