from enum import Enum

class VmStatus(Enum):
    NOT_STARTED = 0
    WAIT_INPUT = 1
    HAVE_OUTPUT = 2
    HALTED = 3

class Vm:
    def __init__(self, mem, base=0, ip=0, status=VmStatus.NOT_STARTED, output=None):
        self.mem = mem
        self.base = base
        self.ip = ip
        self.status = status
        self.output = output

def run_to_end(program, input, logging=False):
    output = []
    vm = Vm(program)
    while True:
        vm = run(vm, input, logging)
        if vm.status == VmStatus.HAVE_OUTPUT:
            output.append(vm.output)
        elif vm.status == VmStatus.HALTED:
            return output
        else:
            raise Exception('{} {}'.format(vm.status, vm))

def run(vm, input, logging=False):
    base = vm.base
    ip = vm.ip
    p = vm.mem

    def get_addr(i, modes):
        mode = modes//int(10**(i-1))%10
        addr = 0
        if mode == 0:
            return p[ip+i]
        elif mode == 1:
            return ip+i
        else:
            return base+p[ip+i]

    def setmem(i, modes, value):
        addr = get_addr(i, modes)
        while addr >= len(p):
            p.append(0)
        p[addr] = value

    def param(i, modes):
        addr = get_addr(i, modes)
        while addr >= len(p):
            p.append(0)
        return p[addr]

    while ip < len(p):
        modes = p[ip]//100
        opcode = p[ip]%100

        def formatArg(mode, i, val):
            res = str(p[ip+i])
            if mode == 0:
                res = "*"+res + "(" + str(param(i, modes))+")"
            if mode == 2:
                res = "@"+res + "(" + str(param(i, modes))+")"
            return res
            
        def log(name, n):
            if logging:
                parts = [str(ip), name]
                for i in range(n):
                    mode = modes//int(10**i)%10
                    parts.append(formatArg(mode, i+1, param(i+1, modes)))
                print(" ".join(parts))

        if opcode == 99: 
            break
        if opcode == 1:
            log("add", 3)
            setmem(3, modes, param(1, modes) + param(2, modes))
            ip+=4
        elif opcode == 2:
            log("mul", 3)
            setmem(3, modes, param(1, modes) * param(2, modes))
            ip+=4
        elif opcode == 3:
            log("inp", 1)
            if len(input) == 0:
                return Vm(p, base, ip, VmStatus.WAIT_INPUT)
            setmem(1, modes, input.pop(0))
            ip+=2
        elif opcode == 4:
            log("out", 1)
            v = param(1, modes)
            ip+=2
            return Vm(p, base, ip, VmStatus.HAVE_OUTPUT, v)
        elif opcode == 5: #jump-if-true
            log("ifT", 2)
            if param(1, modes) != 0:
                ip = param(2, modes)
            else:
                ip+=3
        elif opcode == 6: #jump-if-false
            log("ifF", 2)
            if param(1, modes) == 0:
                ip = param(2, modes)
            else:
                ip+=3
        elif opcode == 7: #less-than
            log("lt ", 3)
            setmem(3, modes, 1 if param(1, modes) < param(2, modes) else 0)
            ip+=4
        elif opcode == 8: #equals
            log("eq ", 3)
            setmem(3, modes, 1 if param(1, modes) == param(2, modes) else 0)
            ip+=4
        elif opcode == 9: #set-rel-base
            log("rel-base ", 1)
            base = base + param(1, modes)
            ip+=2
        else:
            raise Exception("Unknown opcode: {}".format(opcode))
    return Vm(p, base, ip, VmStatus.HALTED)

p = [1102,34463338,34463338,63,1007,63,34463338,63,1005,63,53,1101,3,0,1000,109,988,209,12,9,1000,209,6,209,3,203,0,1008,1000,1,63,1005,63,65,1008,1000,2,63,1005,63,902,1008,1000,0,63,1005,63,58,4,25,104,0,99,4,0,104,0,99,4,17,104,0,99,0,0,1101,26,0,1015,1101,29,0,1010,1102,1,24,1013,1102,1,33,1008,1102,36,1,1012,1101,0,572,1023,1101,35,0,1014,1101,0,38,1019,1102,1,30,1006,1101,0,890,1029,1101,34,0,1011,1101,28,0,1002,1102,1,1,1021,1101,0,37,1001,1101,0,197,1026,1101,22,0,1017,1102,1,895,1028,1101,0,20,1007,1102,21,1,1004,1102,1,39,1016,1101,0,0,1020,1102,1,190,1027,1101,0,775,1024,1102,31,1,1018,1101,0,23,1003,1101,0,25,1009,1101,770,0,1025,1101,0,27,1000,1102,1,575,1022,1101,0,32,1005,109,27,2106,0,0,1001,64,1,64,1106,0,199,4,187,1002,64,2,64,109,-18,21101,40,0,5,1008,1014,39,63,1005,63,219,1106,0,225,4,205,1001,64,1,64,1002,64,2,64,109,-6,1201,-1,0,63,1008,63,28,63,1005,63,251,4,231,1001,64,1,64,1105,1,251,1002,64,2,64,109,5,21102,41,1,3,1008,1011,38,63,1005,63,271,1105,1,277,4,257,1001,64,1,64,1002,64,2,64,109,-7,2102,1,1,63,1008,63,28,63,1005,63,299,4,283,1106,0,303,1001,64,1,64,1002,64,2,64,109,-7,1207,10,22,63,1005,63,321,4,309,1106,0,325,1001,64,1,64,1002,64,2,64,109,16,2107,31,-4,63,1005,63,345,1001,64,1,64,1105,1,347,4,331,1002,64,2,64,109,-9,1201,3,0,63,1008,63,18,63,1005,63,371,1001,64,1,64,1106,0,373,4,353,1002,64,2,64,109,7,1202,-7,1,63,1008,63,40,63,1005,63,393,1106,0,399,4,379,1001,64,1,64,1002,64,2,64,109,-5,1208,5,33,63,1005,63,417,4,405,1106,0,421,1001,64,1,64,1002,64,2,64,109,1,1202,2,1,63,1008,63,30,63,1005,63,443,4,427,1105,1,447,1001,64,1,64,1002,64,2,64,109,-7,2102,1,10,63,1008,63,19,63,1005,63,471,1001,64,1,64,1105,1,473,4,453,1002,64,2,64,109,6,2108,21,0,63,1005,63,489,1105,1,495,4,479,1001,64,1,64,1002,64,2,64,109,9,21108,42,42,0,1005,1012,513,4,501,1105,1,517,1001,64,1,64,1002,64,2,64,109,7,21107,43,44,-1,1005,1018,535,4,523,1106,0,539,1001,64,1,64,1002,64,2,64,109,-5,21101,44,0,2,1008,1016,44,63,1005,63,561,4,545,1105,1,565,1001,64,1,64,1002,64,2,64,2105,1,9,1106,0,581,4,569,1001,64,1,64,1002,64,2,64,109,13,21107,45,44,-9,1005,1018,597,1105,1,603,4,587,1001,64,1,64,1002,64,2,64,109,-25,2101,0,3,63,1008,63,32,63,1005,63,625,4,609,1105,1,629,1001,64,1,64,1002,64,2,64,109,7,1208,-7,30,63,1005,63,645,1105,1,651,4,635,1001,64,1,64,1002,64,2,64,109,-2,21102,46,1,9,1008,1016,46,63,1005,63,677,4,657,1001,64,1,64,1106,0,677,1002,64,2,64,109,-2,21108,47,48,9,1005,1014,697,1001,64,1,64,1105,1,699,4,683,1002,64,2,64,109,14,1205,2,713,4,705,1105,1,717,1001,64,1,64,1002,64,2,64,109,-7,1206,8,735,4,723,1001,64,1,64,1106,0,735,1002,64,2,64,109,-18,2101,0,6,63,1008,63,24,63,1005,63,759,1001,64,1,64,1106,0,761,4,741,1002,64,2,64,109,29,2105,1,1,4,767,1106,0,779,1001,64,1,64,1002,64,2,64,109,-5,1206,3,791,1106,0,797,4,785,1001,64,1,64,1002,64,2,64,109,-12,2107,31,-1,63,1005,63,819,4,803,1001,64,1,64,1105,1,819,1002,64,2,64,109,7,1205,7,835,1001,64,1,64,1105,1,837,4,825,1002,64,2,64,109,-11,1207,7,24,63,1005,63,853,1106,0,859,4,843,1001,64,1,64,1002,64,2,64,109,4,2108,27,-6,63,1005,63,881,4,865,1001,64,1,64,1106,0,881,1002,64,2,64,109,24,2106,0,-2,4,887,1106,0,899,1001,64,1,64,4,64,99,21102,27,1,1,21101,0,913,0,1106,0,920,21201,1,61934,1,204,1,99,109,3,1207,-2,3,63,1005,63,962,21201,-2,-1,1,21101,0,940,0,1106,0,920,21202,1,1,-1,21201,-2,-3,1,21101,0,955,0,1105,1,920,22201,1,-1,-2,1105,1,966,22102,1,-2,-2,109,-3,2105,1,0]

#run_to_end([109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99], [1])
print("Part One:", run_to_end(p.copy(), [1]))
print("Part Two:", run_to_end(p.copy(), [2]))