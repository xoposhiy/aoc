import itertools
from enum import Enum

class VmStatus(Enum):
    WAIT_INPUT = 1
    HAVE_OUTPUT = 2
    HALTED = 3

p = [3,225,1,225,6,6,1100,1,238,225,104,0,1101,90,64,225,1101,15,56,225,1,14,153,224,101,-147,224,224,4,224,1002,223,8,223,1001,224,3,224,1,224,223,223,2,162,188,224,101,-2014,224,224,4,224,1002,223,8,223,101,6,224,224,1,223,224,223,1001,18,81,224,1001,224,-137,224,4,224,1002,223,8,223,1001,224,3,224,1,223,224,223,1102,16,16,224,101,-256,224,224,4,224,1002,223,8,223,1001,224,6,224,1,223,224,223,101,48,217,224,1001,224,-125,224,4,224,1002,223,8,223,1001,224,3,224,1,224,223,223,1002,158,22,224,1001,224,-1540,224,4,224,1002,223,8,223,101,2,224,224,1,223,224,223,1101,83,31,225,1101,56,70,225,1101,13,38,225,102,36,192,224,1001,224,-3312,224,4,224,1002,223,8,223,1001,224,4,224,1,224,223,223,1102,75,53,225,1101,14,92,225,1101,7,66,224,101,-73,224,224,4,224,102,8,223,223,101,3,224,224,1,224,223,223,1101,77,60,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,7,226,677,224,1002,223,2,223,1005,224,329,1001,223,1,223,1007,226,677,224,1002,223,2,223,1005,224,344,101,1,223,223,108,226,226,224,1002,223,2,223,1006,224,359,101,1,223,223,7,226,226,224,102,2,223,223,1005,224,374,101,1,223,223,8,677,677,224,1002,223,2,223,1005,224,389,1001,223,1,223,107,677,677,224,102,2,223,223,1006,224,404,101,1,223,223,1107,677,226,224,102,2,223,223,1006,224,419,1001,223,1,223,1008,226,226,224,1002,223,2,223,1005,224,434,1001,223,1,223,7,677,226,224,102,2,223,223,1006,224,449,1001,223,1,223,1107,226,226,224,1002,223,2,223,1005,224,464,101,1,223,223,1108,226,677,224,102,2,223,223,1005,224,479,101,1,223,223,1007,677,677,224,102,2,223,223,1006,224,494,1001,223,1,223,1107,226,677,224,1002,223,2,223,1005,224,509,101,1,223,223,1007,226,226,224,1002,223,2,223,1006,224,524,101,1,223,223,107,226,226,224,1002,223,2,223,1005,224,539,1001,223,1,223,1108,677,677,224,1002,223,2,223,1005,224,554,101,1,223,223,1008,677,226,224,102,2,223,223,1006,224,569,1001,223,1,223,8,226,677,224,102,2,223,223,1005,224,584,1001,223,1,223,1008,677,677,224,1002,223,2,223,1006,224,599,1001,223,1,223,108,677,677,224,102,2,223,223,1006,224,614,1001,223,1,223,108,226,677,224,102,2,223,223,1005,224,629,101,1,223,223,8,677,226,224,102,2,223,223,1005,224,644,101,1,223,223,107,677,226,224,1002,223,2,223,1005,224,659,101,1,223,223,1108,677,226,224,102,2,223,223,1005,224,674,1001,223,1,223,4,223,99,226]


def run(state, input):
    """
    state -- (program, ip, VmStatus, lastOutput)
    input -- list of available inputs
    """
    p = state[0]
    ip = state[1]

    def param(i, modes):
        mode = modes//int(10**(i-1))%10
        if mode == 0:
            return p[p[ip+i]]
        else:
            return p[ip+i]

    while ip < len(p):
        modes = p[ip]//100
        opcode = p[ip]%100
        if opcode == 99: 
            break
        if opcode == 1: # sum
            p[p[ip+3]] = param(1, modes) + param(2, modes)
            ip+=4
        elif opcode == 2: # multiply
            p[p[ip+3]] = param(1, modes) * param(2, modes)
            ip+=4
        elif opcode == 3: # input
            if len(input) == 0:
                return (p, ip, VmStatus.WAIT_INPUT)
            p[p[ip+1]] = input.pop(0)
            ip+=2
        elif opcode == 4: # output
            v = param(1, modes)
            ip+=2
            return (p, ip, VmStatus.HAVE_OUTPUT, v)
        elif opcode == 5: #jump-if-true
            if param(1, modes) != 0:
                ip = param(2, modes)
            else:
                ip+=3
        elif opcode == 6: #jump-if-false
            if param(1, modes) == 0:
                ip = param(2, modes)
            else:
                ip+=3
        elif opcode == 7: #less-than
            p[p[ip+3]] = 1 if param(1, modes) < param(2, modes) else 0
            ip+=4
        elif opcode == 8: #equals
            p[p[ip+3]] = 1 if param(1, modes) == param(2, modes) else 0
            ip+=4
        else:
            raise Exception("Unknown opcode: ", opcode)
    return (p, ip, VmStatus.HALTED)

def amplify(p, phases):
    signal = 0
    for i in range(0, 5):
        res = run((p.copy(), 0), [phases[i], signal])
        if res[2] == VmStatus.HAVE_OUTPUT:
            signal = res[3]
        else:
            raise Exception(res)
    return signal

def maxsignal(prog):
    bestPhases = max(
        list(itertools.permutations(list(range(0, 5)))),
        key=(lambda perm: amplify(prog, list(perm))))
    return (list(bestPhases), amplify(prog, list(bestPhases)))

def amplifyloop(p, phases):
    signal = 0
    vms = [run((p.copy(), 0), [phases[i]]) for i in range(0, 5)]
    i = 0
    lastFinal = -1
    while vms[i][2] != VmStatus.HALTED:
        vm = vms[i]
        if vm[2] == VmStatus.HAVE_OUTPUT:
            signal = vm[3]
            if i == 4:
                lastFinal = signal
                #print(phases, lastFinal)
            vm = vms[i] = run(vm, [])
            i = (i + 1) % len(vms)
        elif vm[2] == VmStatus.WAIT_INPUT:
            vms[i] = vm = run(vm, [signal])
    #print(phases, lastFinal)
    return lastFinal

def maxloopedsignal(prog):
    bestPhases = max(
        list(itertools.permutations(list(range(5, 10)))),
        key=(lambda perm: amplifyloop(prog, list(perm))))
    return (list(bestPhases), amplifyloop(prog, list(bestPhases)))

def debug():
    prog = [
        3,26,           #0
        1001,26,-4,26,  #2  m[26] = phase-4
        3,27,           #6  m[27] = signal
        1002,27,2,27,   #8  m[27] = 2*signal
        1,27,26,27,     #12 m[27] = 2*signal + phase - 4
        4,27,           #16 output 2*signal + phase - 4
        1001,28,-1,28,  #18 m[28]--
        1005,28,6,      #22
        99,             #25
        0,0,5]          #26
    #print(amplifyloop(prog, [9,8,7,6,5]))
    print(maxloopedsignal(prog))
    #((((0*2 + 9)*2 + 8)*2 + 7)*2 + 6)*2 + 5

#debug()

prog = [3,8,1001,8,10,8,105,1,0,0,21,38,55,80,97,118,199,280,361,442,99999,3,9,101,2,9,9,1002,9,5,9,1001,9,4,9,4,9,99,3,9,101,5,9,9,102,2,9,9,1001,9,5,9,4,9,99,3,9,1001,9,4,9,102,5,9,9,101,4,9,9,102,4,9,9,1001,9,4,9,4,9,99,3,9,1001,9,3,9,1002,9,2,9,101,3,9,9,4,9,99,3,9,101,5,9,9,1002,9,2,9,101,3,9,9,1002,9,5,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,99,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,99,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,99,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,99]
print("Part One:", maxsignal(prog))

print("Part Two:", maxloopedsignal(prog))